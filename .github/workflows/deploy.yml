name: GitHub Actions를 활용한 CI/CD 파이프라인 구축

on:
  pull_request:
    types: [opened, synchronize, closed]
    branches:
      - release

jobs:
  테스트_실행:
    name: ✅ 테스트 실행
    if: github.event.action == 'opened' || github.event.action == 'synchronize'
    runs-on: ubuntu-latest

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: JDK 설정
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: 테스트 실행
        run: ./gradlew test

  이미지_빌드_및_푸시:
    name: 도커 이미지 빌드 및 ECR 푸시
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    needs: 테스트_실행

    steps:
      - name:  코드 체크아웃
        uses: actions/checkout@v4

      - name: AWS 자격 증명 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name:  ECR 로그인
        run: |
          aws ecr-public get-login-password --region us-east-1 |
          docker login --username AWS --password-stdin public.ecr.aws

      - name: 도커 이미지 빌드 및 푸시
        run: |
          IMAGE_TAG=${{ github.sha }}
          docker build -t ${{ vars.ECR_REPOSITORY_URI }}:$IMAGE_TAG .
          docker push ${{ vars.ECR_REPOSITORY_URI }}:$IMAGE_TAG

  ECS_배포:
    name: ECS 서비스 배포
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    needs: 이미지_빌드_및_푸시

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: AWS 자격 증명 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: 🛠 ECS 태스크 정의 업데이트 및 서비스 재시작
        run: |
          echo " ECS에 배포를 시작합니다..."
          IMAGE_TAG=${{ github.sha }}

          aws ecs describe-task-definition \
            --task-definition ${{ vars.ECS_TASK_DEFINITION }} \
            --query taskDefinition > task-definition.json

          jq --arg IMAGE "${{ vars.ECR_REPOSITORY_URI }}:$IMAGE_TAG" \
            '.containerDefinitions[0].image = $IMAGE |
             del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)' \
            task-definition.json > new-task-def.json

          TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://new-task-def.json \
            --query 'taskDefinition.taskDefinitionArn' --output text)

          aws ecs update-service \
            --cluster ${{ vars.ECS_CLUSTER }} \
            --service ${{ vars.ECS_SERVICE }} \
            --task-definition $TASK_DEF_ARN \
            --desired-count 1