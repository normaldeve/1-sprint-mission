name: Full CI/CD Workflow

on:
  push:
    branches:
      - release

jobs:
  set-environment:
    name: 환경 변수 설정
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set-tag.outputs.image_tag }}
    steps:
      - name: Git SHA 키 설정
        id: set-tag
        run: echo "image_tag=${GITHUB_SHA}" >> "$GITHUB_OUTPUT"

  image-build:
    name: 페이지 빌드 & ECR 푸시 (dev)
    runs-on: ubuntu-latest
    needs: set-environment
    steps:
      - uses: actions/checkout@v3
      - name: AWS 확장 자격 설정
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Amazon ECR 로그인
        run: |
          aws ecr-public get-login-password --region us-east-1 |
          docker login --username AWS --password-stdin public.ecr.aws

      - name: Docker 이미지 빌드 & 푸시
        run: |
          docker build -t ${{ vars.ECR_REPOSITORY_URI }}:${{ needs.set-environment.outputs.image_tag }} .
          docker push ${{ vars.ECR_REPOSITORY_URI }}:${{ needs.set-environment.outputs.image_tag }}

  deploy:
    name: ECS 배포 (dev)
    runs-on: ubuntu-latest
    needs: image-build
    steps:
      - uses: actions/checkout@v3
      - name: AWS 확장 자격 설정
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: ECS 배포
        run: |
          aws ecs describe-task-definition --task-definition ${{ vars.ECS_TASK_DEFINITION }} \
            --query taskDefinition > task-definition.json

          cat task-definition.json | jq --arg IMAGE "${{ vars.ECR_REPOSITORY_URI }}:${{ needs.set-environment.outputs.image_tag }}" \
            '.containerDefinitions[0].image = $IMAGE |
             del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)' \
            > new-task-def.json

          TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://new-task-def.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)

          aws ecs update-service \
            --cluster ${{ vars.ECS_CLUSTER }} \
            --service ${{ vars.ECS_SERVICE }} \
            --task-definition $TASK_DEF_ARN \
            --desired-count 1